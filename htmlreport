<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project Dependency Report</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        h1 {
            text-align: center;
        }
        .button {
            padding: 10px 20px;
            margin: 10px;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .button:hover {
            background-color: #0056b3;
        }
        .content {
            margin-top: 20px;
            display: none;
            padding: 20px;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
        details {
            margin-bottom: 10px;
        }
        summary {
            font-weight: bold;
            cursor: pointer;
        }
        .dependencies {
            margin-left: 20px;
            padding-left: 10px;
            border-left: 2px solid #007BFF;
        }
        #errorMessage {
            color: red;
            text-align: center;
        }
    </style>
</head>
<body>
    <h1>Project Dependency Report</h1>
    <div style="text-align: center;">
        <button class="button" onclick="loadContent('dependency_report.json', 'dependencyContent')">Dependency Report</button>
        <button class="button" onclick="loadContent('reversed_dependency_report.json', 'reverseDependencyContent')">Reverse Dependency Report</button>
    </div>

    <div id="dependencyContent" class="content">
        <h2>Dependency Report</h2>
        <div id="dependencyList"></div>
    </div>

    <div id="reverseDependencyContent" class="content">
        <h2>Reverse Dependency Report</h2>
        <div id="reverseDependencyList"></div>
    </div>

    <p id="errorMessage"></p>

    <script>
        function loadContent(jsonFile, contentId) {
            fetch(jsonFile)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok ' + response.statusText);
                    }
                    return response.json();
                })
                .then(data => {
                    const contentElement = document.getElementById(contentId);
                    const listElement = contentElement.querySelector('div');

                    // Clear any previous content
                    listElement.innerHTML = '';

                    // Populate the collapsible project list
                    for (const project in data) {
                        if (data.hasOwnProperty(project)) {
                            const dependencies = data[project];
                            const detailsElement = document.createElement('details');
                            const summaryElement = document.createElement('summary');
                            const dependenciesElement = document.createElement('div');

                            summaryElement.textContent = project;
                            dependenciesElement.className = 'dependencies';

                            // Populate dependencies
                            dependencies.forEach(dep => {
                                const depElement = document.createElement('div');
                                depElement.textContent = dep;
                                dependenciesElement.appendChild(depElement);
                            });

                            detailsElement.appendChild(summaryElement);
                            detailsElement.appendChild(dependenciesElement);
                            listElement.appendChild(detailsElement);
                        }
                    }

                    // Show the content section
                    document.getElementById('dependencyContent').style.display = 'none';
                    document.getElementById('reverseDependencyContent').style.display = 'none';
                    contentElement.style.display = 'block';
                })
                .catch(error => {
                    console.error('Error loading content:', error);
                    document.getElementById('errorMessage').textContent = 'Error loading content: ' + error.message;
                });
        }
    </script>
</body>
</html>