import paramiko
import os
import time

class SSHExecutor:
    def __init__(self, hostname, private_key_path, username=None):
        self.hostname = hostname
        self.private_key_path = private_key_path
        self.username = username or os.environ.get('USERNAME').lower()
        self.ssh = None

    def connect(self):
        """Establish the SSH connection."""
        try:
            private_key = paramiko.RSAKey.from_private_key_file(self.private_key_path)
            self.ssh = paramiko.SSHClient()
            self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.ssh.connect(
                self.hostname, 
                username=self.username, 
                pkey=private_key, 
                disabled_algorithms={'pubkeys': ['rsa-sha2-256', 'rsa-sha2-512']}
            )
        except (paramiko.SSHException, IOError) as e:
            raise ConnectionError(f"Failed to connect to {self.hostname}: {e}")

    def execute_command(self, command):
        """Execute a command on the remote server and stream the output."""
        if self.ssh is None:
            raise ValueError("SSH connection not established. Call connect() first.")
        
        stdin, stdout, stderr = self.ssh.exec_command(command, get_pty=True, bufsize=1)

        output = []
        while True:
            # Check for available data on stdout
            if stdout.channel.recv_ready():
                data = stdout.channel.recv(1024).decode()
                output.append(data)
                print(data, end="")  # Optional: print to console in real-time
            
            # Check if command is done
            if stdout.channel.exit_status_ready():
                break
            time.sleep(1)

        return ''.join(output)

    def close(self):
        """Close the SSH connection."""
        if self.ssh:
            self.ssh.close()
            self.ssh = None

    def __enter__(self):
        """Support 'with' statement context manager entry."""
        self.connect()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Support 'with' statement context manager exit."""
        self.close()

# Example usage
def execute_commands(host, command):
    with SSHExecutor(hostname=host, private_key_path='Z:\\.ssh\\id_rsa') as ssh_executor:
        return ssh_executor.execute_command(command)